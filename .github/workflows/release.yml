# Modify release documents, create release assets and generate release when there is a push on master using new tag

name: Create new release

# Controls when the workflow will run
on:
  # Triggers the workflow on push events on the master branch when there is new tag
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build" with multiple steps
  createrelease:
    # Only activate build on event in master branch
#    if: github.event.base_ref == 'refs/heads/master'
    
    name: Create new release
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Check out the code
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Get the tag name
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
  		  
  		# Create new update version of the update server
      - name: Insert release info into update server
        run: | 
          sed 's/<updates>/<updates>\n\t<\/updates>/' mod_customfields-updates.xml
          sed 's/<updates>/<updates>\n\t\t<\/data>/' mod_customfields-updates.xml
          sed 's/<updates>/<updates>\n\t\t\t${{ steps.get_version.outputs.VERSION }}' mod_customfields-updates.xml
          sed 's/<updates>/<updates>\n\t\t<data>/' mod_customfields-updates.xml
          sed 's/<updates>/<updates>\n\t<updates>/' mod_customfields-updates.xml
  		
  		# Push changes to the update server
      - name: Automatic commit report for ${{ steps.get_version.outputs.VERSION }}
        run: |
          git config --global user.name 'Luka Oman'
          git config --global user.email 'bubi-luka@users.noreply.github.com'
          git commit -am "Automated report for release ${{ steps.get_version.outputs.VERSION }}"
          git push
       
#      # Create a zip, tar.gz and tar.bz2 archive of all the necessary files and put them online
#      - name: Create a temporary artifact downloads folder
#        run: mkdir zips
#      
#      - name: Create zip archive
#        run: zip -r zips/mod_customfields-${{ steps.get_version.outputs.VERSION }}.zip Helper/ fields/ language/ tmpl/ LICENCE.txt README.md index.html mod_customfields.php mod_customfields.xml
#			
#			- name: Create tar.gz archive
#				run: tar -czf zips/mod_customfields-${{ steps.get_version.outputs.VERSION }}.tar.gz Helper/ fields/ language/ tmpl/ LICENCE.txt README.md index.html mod_customfields.php mod_customfields.xml
#			
#      - name: Create tar.bz2 archive
#        run: tar cjf zips/mod_customfields-${{ steps.get_version.outputs.VERSION }}.tar.bz2  Helper/ fields/ language/ tmpl/ LICENCE.txt README.md index.html mod_customfields.php mod_customfields.xml
#      
#      # Create the new release
#      - name: Create Release
#        uses: "marvinpinto/action-automatic-releases@latest"
#        with:
#          repo_token: "${{ secrets.GITHUB_TOKEN }}"
#          title: "Release ${{ steps.get_version.outputs.VERSION }}"
#          prerelease: true
#          prerelease: false
#      		 files: | 
#            zips/mod_customfields-${{ steps.get_version.outputs.VERSION }}.zip
#            zips/mod_customfields-${{ steps.get_version.outputs.VERSION }}.tar.gz
#            zips/mod_customfields-${{ steps.get_version.outputs.VERSION }}.tar.bz2 
